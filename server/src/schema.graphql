type Query {
  users: [User!]!
  user(id: ID!): User!
  works: [Work!]!
  work(id: ID!): Work!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: CreateUserInput!): User!
  deleteUser(id: ID!): User!
  createWork(input: CreateWorkInput!): Work!
  updateWork(id: ID!, input: CreateWorkInput!): Work!
  deleteWork(id: ID!): Work!
}

type User {
  id: ID!
  role: Role!
  firstName: String!
  lastName: String!
  email: String!
  phone: Int
  address: String
  city: String
  zipCode: Int
  bio: String
}

type Work {
  id: ID!
  title: String!
  organization: String!
  description: String
  skills: [String!]!
  softwares: [String!]!
}

input CreateUserInput {
  role: Role!
  firstName: String!
  lastName: String!
  email: String!
  phone: Int
  address: String
  city: String
  zipCode: Int
  bio: String
}

input UpdateUserInput {
  role: Role
  firstName: String
  lastName: String
  email: String
  phone: Int
  address: String
  city: String
  zipCode: Int
}

input CreateWorkInput {
  title: String!
  organization: String!
  description: String
  skills: WorkCreateSkillsInput!
  softwares: WorkCreateSoftwaresInput!
}

input UpdateWorkInput {
  title: String
  organization: String
  description: String
}

input WorkCreateSkillsInput {
  set: [String!]
}

input WorkCreateSoftwaresInput {
  set: [String!]
}

enum Role {
  ADMIN
  USER
}
